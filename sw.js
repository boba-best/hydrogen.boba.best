var b="./assets/icon.2a39c64c.png";const L=["index.html"],S=["assets/icon.2a39c64c.png","assets/icon-maskable.965d12c4.png","assets/download-sandbox.48a866e9.html","assets/olm.531f328e.wasm","assets/olm.364714ee.js","assets/chevron-down.51ba1a9f.svg","assets/element-logo.40daa817.svg","assets/enable-grid.50603e83.svg","assets/settings.8dc28c28.svg","assets/plus.baac2b4c.svg","assets/disable-grid.953dea9a.svg","assets/search.4ef22a46.svg","assets/clear.071d058a.svg","assets/chevron-left.84ddfa93.svg","assets/dismiss.b7de71bb.svg","assets/chevron-right.f1986338.svg","assets/vertical-ellipsis.5f2769ed.svg","assets/info.709cf63e.svg","assets/send.1a04bcb4.svg","assets/paperclip.8685b572.svg","assets/chevron-small.3ee90e4a.svg","assets/room-members.089003dd.svg","assets/encryption-status.cfc8bda4.svg","assets/e2ee-normal.6bb7db53.svg","assets/e2ee-disabled.f68a5225.svg","assets/chevron-thin-left.88165243.svg","assets/index.e1505b4c.js","assets/vendor.5ddfd232.js","assets/index.e30dc33b.css"],A=["assets/main.bdb9a925.js","assets/olm_legacy.658f14ac.js","assets/Inter-Thin.5d8e2ac4.woff2","assets/Inter-ThinItalic.6b3ded18.woff2","assets/Inter-ExtraLightItalic.b3f94cfe.woff2","assets/Inter-ExtraLight.da47c335.woff2","assets/Inter-Light.0f7dfe72.woff2","assets/Inter-LightItalic.125c7e6a.woff2","assets/Inter-Regular.89d406b0.woff2","assets/Inter-Italic.bab4e808.woff2","assets/Inter-Medium.5d308f3d.woff2","assets/Inter-MediumItalic.76551c20.woff2","assets/Inter-SemiBold.c7c3befe.woff2","assets/Inter-SemiBoldItalic.d376ade4.woff2","assets/Inter-Bold.6f5e9a23.woff2","assets/Inter-BoldItalic.e09dcbe1.woff2","assets/Inter-ExtraBold.0ef4267e.woff2","assets/Inter-ExtraBoldItalic.d1e1f6a0.woff2","assets/Inter-Black.7f1f5616.woff2","assets/Inter-BlackItalic.72d5983b.woff2","assets/Inter-Thin.5565b01e.woff","assets/Inter-ThinItalic.c413497b.woff","assets/Inter-ExtraLightItalic.762fa4d2.woff","assets/Inter-ExtraLight.d7be68a4.woff","assets/Inter-Light.38326098.woff","assets/Inter-LightItalic.ec6c76a8.woff","assets/Inter-Regular.5b3a854b.woff","assets/Inter-Italic.7b187d57.woff","assets/Inter-Medium.0fc5d904.woff","assets/Inter-MediumItalic.1458af9d.woff","assets/Inter-SemiBold.04cd699f.woff","assets/Inter-SemiBoldItalic.420db54a.woff","assets/Inter-Bold.20d46cff.woff","assets/Inter-BoldItalic.31a185fa.woff","assets/Inter-ExtraBold.45bae435.woff","assets/Inter-ExtraBoldItalic.30a1af87.woff","assets/Inter-Black.067c82f7.woff","assets/Inter-BlackItalic.c628a2cf.woff","assets/manifest.56e72e88.json"],w=`hydrogen-assets-${"2959901537"}`,l="hydrogen-assets",u="hydrogen-media-thumbnails-v2";self.addEventListener("install",function(e){e.waitUntil((async()=>{await(await caches.open(w)).addAll(L);const a=await caches.open(l);await Promise.all(S.map(async o=>{await a.match(o)||await a.add(o)}))})())});self.addEventListener("activate",e=>{self.clients.claim(),e.waitUntil(U())});async function U(){const e=await caches.keys();for(const t of e)t!==w&&t!==l&&t!==u&&await caches.delete(t);const s=await caches.open(l),a=await s.keys(),o=S.concat(A).map(t=>new URL(t,self.registration.scope).href);for(const t of a)o.some(i=>i===t.url)||s.delete(t)}self.addEventListener("fetch",e=>{e.request.method==="GET"&&e.respondWith(T(e.request))});function p(e){if(e.pathname.startsWith("/_matrix/media/r0/thumbnail/")){const s=parseInt(e.searchParams.get("width"),10),a=parseInt(e.searchParams.get("height"),10);if(s<=50&&a<=50)return!0}return!1}const d=new URL(self.registration.scope);let g=new AbortController;async function T(e){try{const s=new URL(e.url);s.origin===d.origin&&s.pathname===d.pathname&&(e=new Request(new URL("index.html",d.href)));let a=await I(e);return a||(p(s)?a=await fetch(e,{signal:g.signal,mode:"cors",credentials:"omit"}):a=await fetch(e,{signal:g.signal}),await k(e,a)),a}catch(s){throw s.name!=="TypeError"&&s.name!=="AbortError"&&console.error("error in service worker",s),s}}async function k(e,s){if(s.status>=400)return;const a=new URL(e.url),o=self.registration.scope;if(p(a))(await caches.open(u)).put(e,s.clone());else if(e.url.startsWith(o)){let t=e.url.substr(o.length);A.includes(t)&&await(await caches.open(l)).put(e,s.clone())}}async function I(e){let a=await(await caches.open(w)).match(e);if(a||(a=await(await caches.open(l)).match(e),a))return a;const t=new URL(e.url);if(p(t)){const i=await caches.open(u);a=await i.match(e),(a==null?void 0:a.status)>=400&&(await i.delete(e),a=null)}return a}self.addEventListener("message",e=>{var o;const s=t=>e.source.postMessage({replyTo:e.data.id,payload:t}),{replyTo:a}=e.data;if(a){const t=E.get(a);t&&(E.delete(a),t(e.data.payload))}else switch((o=e.data)==null?void 0:o.type){case"version":s({version:"0.2.26",buildHash:"2959901537"});break;case"skipWaiting":self.skipWaiting();break;case"haltRequests":e.waitUntil(P().finally(()=>s()));break;case"closeSession":e.waitUntil(F(e.data.payload.sessionId,e.source.id).finally(()=>s()));break}});const y="new_message";async function D(e){if(e.notification.tag!==y){console.log("clicked notif with tag",e.notification.tag);return}const{sessionId:s,roomId:a}=e.notification.data,t=`${`#/session/${s}`}/room/${a}`,i=await R(async c=>await f(c,"hasSessionOpen",{sessionId:s}));if(i){if(console.log("notificationclick: client has session open, showing room there"),i.postMessage({type:"openRoom",payload:{roomId:a}}),"focus"in i)try{await i.focus()}catch(c){console.error(c)}}else if(self.clients.openWindow){console.log("notificationclick: no client found with session open, opening new window");const c=new URL(`./${t}`,d).href;await self.clients.openWindow(c)}}self.addEventListener("notificationclick",e=>{e.notification.close(),e.waitUntil(D(e))});async function O(e){var o;console.log("got a push message",e);const s=e.session_id;let a=e.sender_display_name||e.sender;if(a&&e.event_id){const t=e.room_id;if(!!await R(async n=>{if(n.visibilityState==="visible"&&n.focused)return await f(n,"hasRoomOpen",{sessionId:s,roomId:t})})){console.log("client is focused, room is open, don't show notif");return}const c=Array.from(await self.registration.getNotifications({tag:y})),H=c.filter(n=>n.data.roomId===t).some(n=>n.data.multi),N=c.some(n=>!n.data.multi),r=e.room_name||e.room_alias;let C=!1,h,m;if(H){console.log("already have a multi message, don't do anything");return}else N?(console.log("showing multi message notification"),C=!0,h=r||a,m="New messages"):(console.log("showing new message notification"),r&&r!==a?h=`${a} in ${r}`:h=a,m=((o=e.content)==null?void 0:o.body)||"New message");await self.registration.showNotification(h,{body:m,data:{sessionId:s,roomId:t,multi:C},tag:y,badge:b})}}self.addEventListener("push",e=>{e.waitUntil(O(e.data.json()))});async function F(e,s){const a=await self.clients.matchAll();await Promise.all(a.map(async o=>{o.id!==s&&await f(o,"closeSession",{sessionId:e})}))}async function P(){const e=await self.clients.matchAll({type:"window"});await Promise.all(e.map(s=>f(s,"haltRequests"))),g.abort()}const E=new Map;let _=0;function f(e,s,a){_+=1;const o=_,t=new Promise(i=>{E.set(o,i)});return e.postMessage({type:s,id:o,payload:a}),t}async function R(e){const s=await self.clients.matchAll({type:"window"});for(const a of s)if(await e(a))return a}
//# sourceMappingURL=sw.js.map
